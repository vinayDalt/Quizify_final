version: "2"

services:
  mysql:
    image: mysql:5.7
    ports:
      - 3306:3306
    environment:
      - MYSQL_ROOT_PASSWORD=Root@123
      - MYSQL_DATABASE=loginDB
    container_name: mysql
    network_mode: host
    hostname: 0.0.0.0

  mongo:
    image: mongo:3.4-jessie
    ports:
      - 27017:27017
    expose:
      - 27017
    container_name: mongo
    network_mode: host

  neo4j:
    image: neo4j
    ports:
      - 7474:7474
      - 7687:7687
    expose:
      - 7474
      - 7687
    container_name: neo4j
    network_mode: host
    volumes:
      - './data/neo4j:/var/lib/neo4j/data'
    environment:
      - NEO4J_AUTH=neo4j/quizify

  zookeeper:
    container_name: zookeeper
    image: wurstmeister/zookeeper
    restart: always
    network_mode: host
    ports:
      - 2181:2181
    expose:
      - 2181
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000000000

  kafka:
    container_name: kafka
    image: wurstmeister/kafka
    restart: always
    mem_limit: 2000000000
    ports:
      - 9092:9092
    expose:
      - 9092
    depends_on:
      - zookeeper
    network_mode: host
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: 127.0.0.1:2181
      KAFKA_MESSAGE_MAX_BYTES: 1000000000
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'

  apigateway:
    image: zuul-service
    build: zuul-gatewayservice/
    restart: always
    network_mode: host
    depends_on:
      - eurekaserver
    ports:
      - 8092:8092
    expose:
      - 8092

  eurekaserver:
    image: eureka-servcie:latest
    build: eureka-server/
    restart: always
    network_mode: host
    container_name: eureka-server-docker
    ports:
      - 9091:9091
    expose:
      - 9091

  configserver:
    image: config-servcie:latest
    build: config-server/
    restart: always
    network_mode: host
    depends_on:
      - eurekaserver
    ports:
      - 8888:8888
    expose:
      - 8888

  question-manager-service:
    image: question-manager-service
    build: question-manager-service/
    restart: always
    network_mode: host
    depends_on:
      - kafka
      - mongo
      - eurekaserver
      - configserver
      - apigateway
    ports:
      - 8001:8001
    expose:
      - 8001

  game-manager-service:
    image: game-manager-service
    build: game-manager-service/
    restart: always
    network_mode: host
    depends_on:
      - kafka
      - mongo
      - eurekaserver
      - configserver
      - apigateway
    ports:
      - 8102:8102
    expose:
      - 8102

  search-service:
    image: search-service
    build: search-service/
    restart: always
    network_mode: host
    depends_on:
      - kafka
      - mongo
      - eurekaserver
      - configserver
      - apigateway
    ports:
      - 8106:8106
    expose:
      - 8106

  user-registration-service:
    image: user-registration-service
    build: user-registration-service/
    restart: always
    network_mode: host
    depends_on:
      - kafka
      - mongo
      - eurekaserver
      - configserver
      - apigateway
    ports:
      - 8999:8999
    expose:
      - 8999

  user-authentication-service:
    image: user-authentication-service
    build: user-authentication-service/
    restart: always
    network_mode: host
    depends_on:
      - kafka
      - mysql
      - eurekaserver
      - configserver
      - apigateway
    ports:
      - 8095:8095
    expose:
      - 8095

  recommendation-service:
    image: recommendation-service
    build: recommendation-service/
    restart: always
    network_mode: host
    depends_on:
      - kafka
      - neo4j
      - eurekaserver
      - configserver
      - apigateway
    ports:
      - 8104:8104
    expose:
      - 8104


  single-player-engine:
    image: single-player-engine
    build: single-player-engine/
    restart: always
    network_mode: host
    depends_on:
      - kafka
      - eurekaserver
      - configserver
      - apigateway
    ports:
      - 8108:8108
    expose:
      - 8108


  quizify-front-end:
    image: quizify-front-end
    build: Quizify-FrontEnd/
    container_name: quizify-front-end
    network_mode: host
    hostname: 0.0.0.0
    ports:
      - 4200:4200
    expose:
      - 4200
    restart: always

  sonarqube:
    image: sonarqube
    ports:
      - 9000:9000
    network_mode: host
    volumes:
      - './sonar-data:/opt/sonarqube/conf'
      #    entrypoint: ./run.sh
    environment:
      - sonar.embeddedDatabase.port=8115